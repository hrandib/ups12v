#! /usr/bin/python

import serial
import configparser
import signal
import os
import time
import functools
from influxdb_client import InfluxDBClient, Point as DbPoint, WriteOptions, WritePrecision
from datetime import datetime

MAX_INPUT_LEN = 512

# Disable buffering
print = functools.partial(print, flush=True)

conf = configparser.ConfigParser()

files = conf.read(['/etc/ups-daemon.conf', 'ups-daemon.conf'])
if files:
    print(f'Config(s) path: {", ".join(files)}')
else:
    print('Config file is not accessible. Exiting')
    exit(-2)

db_conf = conf['INFLUXDB']

ser = None
port = conf.get('UPS', 'Tty', fallback='ttyACM0')
try:
    ser = serial.Serial('/dev/' + port, exclusive=True, timeout=0.2)
except serial.SerialException:
    print(f'Port {port} is not available. Exiting')
    exit(-1)


def signal_handler(sig, frame):
    print(' SIGINT captured')
    exit(0)


signal.signal(signal.SIGINT, signal_handler)


def port_is_alive():
    try:
        ser.inWaiting()
        return True
    except serial.SerialException:
        return False


def send_command(*cmd_with_args):
    if not port_is_alive():
        print("Port disconnected. Exiting")
        exit(-1)
    cmd = ' '.join(map(str, cmd_with_args))
    ser.write(b'\x03\r')
    time.sleep(0.1)
    ser.reset_input_buffer()
    ser.write(bytes(f'{cmd}\r', 'utf8'))
    ser.readline()
    output = ser.read(MAX_INPUT_LEN).decode('utf8')
    output = output[0:output.rfind('\r\n')]
    return output


def set_limits():
    ups = conf['UPS']
    if conf.has_option('UPS', 'LimitCharge'):
        val = ups['LimitCharge']
        print(f"Limit charge to {val}% >", end=' ')
        res = send_command('limit-charge', val)
        print(res)
    if conf.has_option('UPS', 'LimitIdleDischarge'):
        val = ups['LimitIdleDischarge']
        print(f"Limit idle discharge {val}% >", end=' ')
        res = send_command('limit-discharge', val)
        print(res)


set_limits()

shutdown_threshold = conf.getint('UPS', 'ShutdownThreshold', fallback=30)
print(f'Shutdown will be initiated reaching {shutdown_threshold}% battery level during discharge')

shutdown_triggered = False


def shutdown():
    global shutdown_triggered
    if not shutdown_triggered:
        print('Shutdown initiated')
        shutdown_triggered = True
        if conf.has_option('UPS', 'ShutdownScript'):
            os.system(conf.get('UPS', 'ShutdownScript'))
        os.system('shutdown +1')


def cancel_shutdown():
    global shutdown_triggered
    if shutdown_triggered:
        print('Shutdown canceling')
        shutdown_triggered = False
        os.system('shutdown -c')


prev_level = 100


def thin_out_print(state, level):
    global prev_level
    if (state in ['IDLE', 'DISCHARGE'] and prev_level > level) \
            or (state in ['CHARGE', 'TRICKLE'] and prev_level < level):
        prev_level = level
        print(f'State: {state} {level}%')


print(send_command('poll'))
prev_state = 'IDLE'


def adjust_prev_state(state):
    global prev_state, prev_level
    if prev_state != state:
        prev_state = state
        print(f'State change: {state}')
        if state in ['IDLE', 'DISCHARGE']:
            prev_level = 100
        elif state in ['TRICKLE', 'CHARGE']:
            prev_level = 0


# InfluxDB related begin


def get_db_writer():
    url = db_conf['Url']
    client = InfluxDBClient(url=url, token=db_conf['Token'], org=db_conf['Org'], timeout=140_000)
    if client.ping():
        print(f'Connected to the DB: {url}')
        return client.write_api(write_options=WriteOptions(flush_interval=60_000))
    else:
        print(f'DB connection failed: {url}')
        return None


def log_dummy():
    pass


log_db = log_dummy
if conf.has_option('INFLUXDB', 'Enable') and conf.getboolean('INFLUXDB', 'Enable'):
    db_writer = get_db_writer()
    if db_writer is not None:
        bucket = db_conf['Bucket']
        measurement = db_conf['Measurement']

        def db_write(v12, vbat, diff, level, state):
            tp = datetime.utcnow().isoformat()
            point = DbPoint(measurement).tag('state', state).field('v12', v12).field('vbat', vbat)\
                .field('balance', diff).field('level', level).time(tp, WritePrecision.S)
            db_writer.write(bucket=bucket, record=point)
            # print(f'{tp} : {v12} {vbat} {diff} {level} {state}')
        log_db = db_write


# InfluxDB related end


def main_loop():
    global prev_state, prev_level
    ser.timeout = 2
    idle_writedb_counter = 0
    while True:
        try:
            args = ser.readline().split()
        except serial.SerialException:
            print("Port disconnected. Exiting")
            exit(-1)
        v12, vbat, diff, level = map(int, args[:-1])
        state = args[-1].decode('utf8')
        adjust_prev_state(state)
        thin_out_print(state, level)
        idle_writedb_counter += 1
        if state == 'DISCHARGE' and level <= shutdown_threshold:
            if v12 > 10000:
                shutdown()
            else:
                cancel_shutdown()
                print('Voltage values are unreliable, possible USB adapter disconnection. Exiting')
                exit(-3)
        if state == 'CHARGE' and shutdown_triggered:
            cancel_shutdown()
        if state not in ['IDLE'] or idle_writedb_counter % 120 == 0:
            log_db(v12, vbat, diff, level, state)


main_loop()
